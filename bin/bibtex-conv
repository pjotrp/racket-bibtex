#!/usr/bin/env racket
#lang racket

(require json)
(require srfi/1) ;; for drop-right

(define verbose-mode (make-parameter #f))
(define latex-mode   (make-parameter #f))
(define keyword-mode (make-parameter #f))
(define pjotr-mode   (make-parameter #f))
(define eval-string  (make-parameter #f))

(define files-to-compile
  (command-line
   #:program "bibtex-conv"
   #:once-each
   [("-v" "--verbose") "Compile with verbose messages"
                       (verbose-mode #t)]
   [("-l" "--latex") "LaTeX mode (default is org-mode)"
                     (latex-mode #t)]
   [("-k" "--keyword") kw "Filter on keyword"
                       (keyword-mode kw)]
   [("-e" "--eval") e "Filter on s-exp"
                    (eval-string e)]
   [("-p" "--pjotr") "Author is Pjotr"
                     (pjotr-mode #t)]
   #:args args args
))

#|
A JSON record

[
  {
    "DOI": "10.1007/978-1-4939-9074-0_21",
    "URL": "http://www.ncbi.nlm.nih.gov/pubmed/31278680",
    "author": [
      {
        "family": "Prins",
        "given": "P."
      },
      {
        "family": "Smant",
        "given": "G."
      },
      {
        "family": "Jansen",
        "given": "R. C."
      }
    ],
    "container-title": "Methods Mol Biol",
    "id": "Prins:2019",
    "issued": {
      "date-parts": [
        [
          2019
        ]
      ]
    },
    "keyword": "genenetwork",
    "page": "635-652",
    "title": "<span class=\"nocase\">Systems Genetics for Evolutionary Studies</span>",
    "type": "article-journal",
    "volume": "1910"
  },

|#

(define single-bibentries
  ;; Convert bibentries to ID based hash
  ;; removes duplicates and turn back to list
  (let [(records (read-json))]
    (for/hash ([(rec) records])
      (values (hash-ref rec 'id) rec)
      )))

(define (remove-nocase s)
  ;; Remove introduced span statements
  (string-replace (string-replace s "<span class=\"nocase\">" "") "</span>" ""))

(define (form-given given)
  (string-join
   (for/list ([author (regexp-split #rx"[ .]+" given)])
     (if (> (string-length author) 1)
         (substring author 0 1)
         author
         ))
   ""))

(define (form-author given family)
  ;; (string-append given " " family)
  (string-append family "~" (form-given given))
  )

(define (authors lst)
  ;; returns a list of formed authors
  (for/list ([author lst])
    (let* [(given  (hash-ref author 'given ""))
           (family (hash-ref author 'family ""))
           (fullname (form-author given family))
           ]
      (match fullname
        [(or "P. Prins" "Prins P" "Prins~P")
         (if (latex-mode)
             (string-append "\\textsc{" fullname "}")
             (string-append "_" fullname "_"))
         ]
        [_ fullname]
        )
    )))

(define (reduce-authors lst)
  ;; limit authors to 4 if more than 20
  (let [(as (authors lst))]
    (if (> (length as) 20)
        (append (take as 4) '("\\emph{et al.}"))
        as)
  ))

(define (url text uri)
  ;; Org mode style URL
  (if uri
      (string-append "[[" uri "][" text "]]")
      text
      ))

(define (pretty s [pre ""] [post ""])
  ;; pretty wraps an item in pre and post strings
  (string-append pre
          (if (number? s)
              (number->string s)
              s)
              post))

(define (pretty2 bib id [pre ""] [post ""])
  ;; pretty2 wraps an item in pre and post strings
  (let [(s (hash-ref bib id #f))]
    (if (string? s)
        (string-append pre s post)
        ""))
  )

(define (year bib)
  (first (first (hash-ref (hash-ref bib 'issued "") 'date-parts))))

(define short-list
  (for/list ([(id bib) single-bibentries])
    bib))

(define (sorted-list list)
  (sort list
        >
        #:key (lambda (b) (year b))
        )
  )

(define (filtered-list list)
  (cond
    [(string? (keyword-mode))
     (filter (lambda (b)
               (string-contains? (hash-ref b 'keyword "") (keyword-mode)))
             list)]
    [(pjotr-mode)
     (filter (lambda (b)
               (let [(auths (authors (hash-ref b 'author)))]
                 (findf
                  (lambda (a)(string-contains? a "Prins") ) auths))
                 )
             list)]
    [(string? (eval-string))
     (filter (lambda (b)
               (let [(ns (make-base-namespace))]
                 (parameterize [(current-namespace ns)]
                   (namespace-require 'racket/string)
;;                   (display b)
                   (eval
                    (read
                     (open-input-string
                      "#'(string-contains? (hash-ref #,b 'keyword \"xxx\") \"book\")"
                      )) ns))))
               list)]
    [else list]
      ))

(define (make-doi doi)
  (string-append "https://doi.org/" doi)
  )

(define (latex-output short-list)
  (for ([(bib) (filtered-list (sorted-list short-list))])
    (let* [(url1  (hash-ref bib 'URL #f))
           (url2  (if url1
                      url1
                      (make-doi (hash-ref bib 'DOI #f))))
           (journal (hash-ref bib 'container-title))
           (keyword (hash-ref bib 'keyword ""))
           (first-author? (string-contains? keyword "first"))
           (last-author? (string-contains? keyword "last"))
           ]
      (display "\\item ")
      (let [(auths (reduce-authors (hash-ref bib 'author)))]
        (display (string-join (drop-right auths 1) ", "))
        (let [(lst (last auths))]
          (if (string=? lst "\\emph{et al.}")
              (display (string-append " " lst))
              (display (string-append " and " lst)))))
      (display (pretty (year bib) " (" ") "))
      (display (remove-nocase (pretty2 bib 'title "\\emph{" "}.")))
      ;; (display (string-append "<" journal ">"))
      (if
       (for/or ([j '("Nature" "Nat Rev Genet" "Nat Biotechnol" "Genetics" "PLoS Comput Biol" "PLoS Genet" "Cell Syst" "Nucleic Acids Res")] #:when (equal? journal j)) 1)
        (display (pretty2 bib 'container-title " \\hijournal{" "} "))
        (display (pretty2 bib 'container-title " \\journal{" "} "))
        )
      (display (pretty2 bib 'volume " " ""))
      (display (pretty2 bib 'issue "(" ")"))
      (display (pretty2 bib 'page " p.~"))
      (display (pretty2 bib 'edition " (" " edition)"))
      (display (pretty2 bib 'note " {\\bf (" ")}"))
      (if url2
          (display (pretty url2 "~\\href{" "}{\\ding{234}}"))
          #t
          )
      (display "\n\n")
      )))

(define (org-output short-list)
  (for ([(bib) (filtered-list (sorted-list short-list))])
    (display "1. ")
    (let* [(title (hash-ref bib 'title))
           (url1  (hash-ref bib 'URL #f))
           (url2  (if url1
                      url1
                      (make-doi (hash-ref bib 'DOI #f))))
           ]
      (display (url (remove-nocase title) url2)))
    (display " by ")
    (let [(auths (authors (hash-ref bib 'author)))]
      (display (string-join (drop-right auths 1) ", "))
      (display " and ")
      (display (last auths))
      )
    (display (pretty2 bib 'container-title ", @@html:<span class=\"journal\">@@"
                      "@@html:</span>@@"))
    (display " (@@html:<span class=\"year\">@@")
    (display (year bib))
    (display "@@html:</span>@@)")
    (display (pretty2 bib 'volume " Vol "))
    (display (pretty2 bib 'page " p. "))
    (display (pretty2 bib 'edition " (" " edition)"))
    (display (pretty2 bib 'DOI ", DOI: "))
    (display (pretty2 bib 'note " (*" "*)"))
    #|
    (display (match bib
    [(hash-table ('DOI doi)) doi]
    [_ ""]))
    |#
    (newline)
    ))

(if (latex-mode)
    (latex-output short-list)
    (org-output short-list))


#|
(display "----")
(let [(ns (make-base-namespace))
      (s "test")]
  (parameterize [(current-namespace ns)]
    (let [(s1 s)]
      (eval (read (open-input-string "(display s1)")) ns))))
|#
