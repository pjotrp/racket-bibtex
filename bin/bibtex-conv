#lang racket

(require json)

#|
(define verbose-mode (make-parameter #f))

(define files-to-compile
  (command-line
   #:program "bibtex-conv"
   #:once-each
   [("-v" "--verbose") "Compile with verbose messages"
                       (verbose-mode #t)]
   #:args args args
))

(display files-to-compile)
|#

;; (let [(buf (read-bytes 100))]
;;   (display buf))

#|
(define (reader lines)
  (cond
    [(eof-object? current-input-port) lines]
    ;; [else (cons lines (read-line (current-input-port)))]
    [else (let [(new (cons lines (read-line (current-input-port))))]
            (display new)
            (reader new)
    )]))
|#

(define (forever)
  (let loop ([count 1])
    (printf "looping ~a\n" count)
    (loop (add1 count))))

(define (next-line-it lst)
  (let ((line (read-line (current-input-port) 'any)))
    (unless (eof-object? line)
      (displayln line)
      (cons lst line)
      (next-line-it lst)
      )
    )
  lst
  )


#|
(define (reader)
  (let loop ([lst '()])
    (display lst)
    (loop (cons lst (read-line (current-input-port))))))

(let stdin->list ((res  '()))
  (let [(line (read-line (current-input-port)))]
    (if (eof-object? line)
        res
        (stdin->list (cons res line)
                     ))))
(require 2htdp/batch-io)
(read-lines 'stdin)

|#

(define (reader1 func)
  (let stdin->list ((res  '()))
    (let [(line (read-line (current-input-port)))]
      (if (eof-object? line)
          #t
          (stdin->list (func line))
                       ))))


#|

(reader (lambda (line)
          (display (string-append "-" line))))


(define (reader func)
  (let loop ()
    (let [(line2 (read-line (current-input-port)))]
      (if (not (eof-object? line2))
          (begin
            (func line2)
            (loop))
          #f
          ))))
|#


(define (reader func)
  (define (read-lines port func)
    (let loop ()
      (let [(line (read-line port))]
        (if (not (eof-object? line))
            (begin
              (func line)
              (loop))
            #t
            ))))
  (begin
    ;; first read stdin
    (read-lines (current-input-port) func)
    ;; next read the other filenames on the command-line
    (for ([fn (current-command-line-arguments)])
      (call-with-input-file fn
        (lambda (port)
          (read-lines port func)
    )))))


(define-syntax-rule (argf/each line body)
  (reader (lambda (line)
            body)))


(define-syntax-rule (argf/each2 line body)
  (let loop ()
    (let [(line (read-line (current-input-port)))]
      (if (not (eof-object? line))
          (begin
            body
            (loop))
          #f
          ))))


(argf/each line
  (write (string-append "-" line)))

;; "-a""-b""-c"#f
